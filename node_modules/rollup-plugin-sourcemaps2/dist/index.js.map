{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import fs from 'node:fs';\nimport { promisify } from 'node:util';\nimport pluginUtils, { type CreateFilter } from '@rollup/pluginutils';\nimport type { ExistingRawSourceMap, Plugin, PluginContext } from 'rollup';\nimport { resolveSourceMap, resolveSources } from './source-map-resolve.js';\n\nconst { createFilter } = pluginUtils;\n\nexport interface SourcemapsPluginOptions {\n  include?: Parameters<CreateFilter>[0];\n  exclude?: Parameters<CreateFilter>[1];\n  readFile?(path: string, callback: (error: Error | null, data: string) => void): void;\n}\n\nexport default function sourcemaps(\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  { include, exclude, readFile }: SourcemapsPluginOptions = {},\n): Plugin {\n  // Create a filter function based on the include and exclude options\n  const filter = createFilter(include, exclude);\n\n  // Default readFile that always reads as UTF-8 string\n  const defaultReadFile = (\n    path: string,\n    cb: (err: NodeJS.ErrnoException | null, data: string) => void,\n  ) => {\n    fs.readFile(path, 'utf8', cb);\n  };\n\n  // Use the provided readFile or the default one\n  const effectiveReadFile = readFile || defaultReadFile;\n\n  // Promisify the readFile function\n  const promisifiedReadFile = promisify(effectiveReadFile);\n\n  return {\n    name: 'sourcemaps',\n\n    load: async function (this: PluginContext, id: string) {\n      let code: string;\n      // If the id does not pass the filter, return null\n      if (!filter(id)) {\n        return null;\n      }\n\n      try {\n        // Try to read the file with the given id\n        code = await promisifiedReadFile(id);\n        // Add the file to the watch list\n        this.addWatchFile(id);\n      } catch {\n        try {\n          // If reading fails, try again without a query suffix that some plugins use\n          const cleanId = id.replace(/\\?.*$/, '');\n          code = (await promisifiedReadFile(cleanId)).toString();\n          // Add the file to the watch list\n          this.addWatchFile(cleanId);\n        } catch {\n          // If reading still fails, warn and return null\n          this.warn('Failed reading file');\n          return null;\n        }\n      }\n\n      let map: ExistingRawSourceMap;\n      try {\n        // Try to resolve the source map for the code\n        const result = await resolveSourceMap(code, id, promisifiedReadFile);\n\n        // If the code contained no sourceMappingURL, return the code\n        if (result === null) {\n          return code;\n        }\n\n        // If the source map was resolved, assign it to map\n        map = result.map;\n      } catch {\n        // If resolving the source map fails, warn and return the code\n        this.warn('Failed resolving source map');\n        return code;\n      }\n\n      // If the sources are not included in the map, try to resolve them\n      if (map.sourcesContent === undefined) {\n        try {\n          const { sourcesContent } = await resolveSources(map, id, promisifiedReadFile);\n          // If all sources are strings, assign them to map.sourcesContent\n          if (sourcesContent.every(item => typeof item === 'string')) {\n            map.sourcesContent = sourcesContent;\n          }\n        } catch {\n          // If resolving the sources fails, warn\n          this.warn('Failed resolving sources for source map');\n        }\n      }\n\n      // Return the code and the map\n      return { code, map };\n    },\n  };\n}\n"],"names":["createFilter","pluginUtils","sourcemaps","include","exclude","readFile","filter","defaultReadFile","path","cb","fs","effectiveReadFile","promisifiedReadFile","promisify","name","load","id","code","addWatchFile","cleanId","replace","toString","warn","map","result","resolveSourceMap","sourcesContent","undefined","resolveSources","every","item"],"mappings":";;;;;AAMA,MAAM,EAAEA,YAAY,EAAE,GAAGC,WAAAA;AAQV,SAASC;AAEtB,EAAEC,OAAO,EAAEC,OAAO,EAAEC,QAAQ,EAA2B,GAAG,EAAE,EAAA;;IAG5D,MAAMC,MAAAA,GAASN,aAAaG,OAASC,EAAAA,OAAAA,CAAAA;;IAGrC,MAAMG,eAAAA,GAAkB,CACtBC,IACAC,EAAAA,EAAAA,GAAAA;QAEAC,EAAGL,CAAAA,QAAQ,CAACG,IAAAA,EAAM,MAAQC,EAAAA,EAAAA,CAAAA;AAC5B,KAAA;;AAGA,IAAA,MAAME,oBAAoBN,QAAYE,IAAAA,eAAAA;;AAGtC,IAAA,MAAMK,sBAAsBC,SAAUF,CAAAA,iBAAAA,CAAAA;IAEtC,OAAO;QACLG,IAAM,EAAA,YAAA;AAENC,QAAAA,IAAAA,EAAM,eAAqCC,EAAU,EAAA;YACnD,IAAIC,IAAAA;;YAEJ,IAAI,CAACX,OAAOU,EAAK,CAAA,EAAA;gBACf,OAAO,IAAA;AACT;YAEA,IAAI;;AAEFC,gBAAAA,IAAAA,GAAO,MAAML,mBAAoBI,CAAAA,EAAAA,CAAAA;;gBAEjC,IAAI,CAACE,YAAY,CAACF,EAAAA,CAAAA;AACpB,aAAA,CAAE,OAAM;gBACN,IAAI;;AAEF,oBAAA,MAAMG,OAAUH,GAAAA,EAAAA,CAAGI,OAAO,CAAC,OAAS,EAAA,EAAA,CAAA;AACpCH,oBAAAA,IAAAA,GAAO,CAAC,MAAML,mBAAoBO,CAAAA,OAAAA,CAAO,EAAGE,QAAQ,EAAA;;oBAEpD,IAAI,CAACH,YAAY,CAACC,OAAAA,CAAAA;AACpB,iBAAA,CAAE,OAAM;;oBAEN,IAAI,CAACG,IAAI,CAAC,qBAAA,CAAA;oBACV,OAAO,IAAA;AACT;AACF;YAEA,IAAIC,GAAAA;YACJ,IAAI;;AAEF,gBAAA,MAAMC,MAAS,GAAA,MAAMC,gBAAiBR,CAAAA,IAAAA,EAAMD,EAAIJ,EAAAA,mBAAAA,CAAAA;;AAGhD,gBAAA,IAAIY,WAAW,IAAM,EAAA;oBACnB,OAAOP,IAAAA;AACT;;AAGAM,gBAAAA,GAAAA,GAAMC,OAAOD,GAAG;AAClB,aAAA,CAAE,OAAM;;gBAEN,IAAI,CAACD,IAAI,CAAC,6BAAA,CAAA;gBACV,OAAOL,IAAAA;AACT;;YAGA,IAAIM,GAAAA,CAAIG,cAAc,KAAKC,SAAW,EAAA;gBACpC,IAAI;AACF,oBAAA,MAAM,EAAED,cAAc,EAAE,GAAG,MAAME,cAAAA,CAAeL,KAAKP,EAAIJ,EAAAA,mBAAAA,CAAAA;;AAEzD,oBAAA,IAAIc,eAAeG,KAAK,CAACC,CAAAA,IAAQ,GAAA,OAAOA,SAAS,QAAW,CAAA,EAAA;AAC1DP,wBAAAA,GAAAA,CAAIG,cAAc,GAAGA,cAAAA;AACvB;AACF,iBAAA,CAAE,OAAM;;oBAEN,IAAI,CAACJ,IAAI,CAAC,yCAAA,CAAA;AACZ;AACF;;YAGA,OAAO;AAAEL,gBAAAA,IAAAA;AAAMM,gBAAAA;AAAI,aAAA;AACrB;AACF,KAAA;AACF;;;;"}